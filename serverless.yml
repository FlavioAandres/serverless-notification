service: serverless-notification
frameworkVersion: "2"
plugins:
  - serverless-localstack
custom:
  localstack:
  stages:
    - local
  host: http://localhost 
  edgePort: 4566 
  autostart: true 
provider:
  name: aws
  stage: test
  runtime: nodejs12.x
  logs:
    restApi: true
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'dynamodb:Query'
        - 'dynamodb:Update'
        - 'dynamodb:Scan'
        - 'dynamodb:PutItem'
        - 'dynamodb:BatchGet'
        - 'dynamodb:Get'
        - 'dynamodb:UpdateItem'
      Resource:
        Fn::GetAtt:
          - DynamoWebSockets
          - Arn
  environment: 
    DYNAMO_TABLE_NAME:
      Ref: DynamoWebSockets
    DYNAMO_ARN:
      Fn::GetAtt: [DynamoWebSockets, Arn]
         
functions:
  WSConnect:
    handler: ./src/websockets.connection
    events: 
      - websocket: 
          route: $connect
      - websocket: 
          route: $disconnect
  WSRegisterConnection: 
    handler: ./src/websockets.register
    events:
      - websocket:
          route: register 
  WSBroadCastMessage: 
    handler: ./src/websockets.broadcast
    events:
      - websocket:
          route: broadcast 
  WSBackendNotification: 
    handler: ./src/sns_lambdas.receiveWSNotification
    events: 
      - sns: 
          arn:
            Ref: ServerlessNotificationTopic
          topicName: ServerlessNotificationTopic
          filterPolicy: 
            types: 
              - WS_REQUEST
    environment: 
      API_GATEWAY_DOMAIN: 
        Fn::Join:
          - ""
          - - "https://"
            - Ref: "WebsocketsApi"
            - ".execute-api."
            - ${self:provider.region}
            - ".amazonaws.com/"
            - ${self:provider.stage}
      
resources:
  Resources:
    DynamoWebSockets:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: WebSocketConnections
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    ServerlessNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "ServerlessNotificationTopic"
